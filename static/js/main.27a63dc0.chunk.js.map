{"version":3,"sources":["components/MarketData/TableRow/TableRow.js","components/MarketData/MarketData.js","containers/App.js","serviceWorker.js","index.js"],"names":["coinTable","props","react_default","a","createElement","className","row","id","rank","symbol","name","formattedPrice","percent_change_24h","percent_change_1h","percent_change_7d","marketData","data-vertable","onClick","sortByRank","sortBySymbol","sortByName","sortByPrice","cryptos","map","price","price_usd","parseFloat","toFixed","TableRow","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sortByRankHandler","setState","state","sort","b","directionRank","defineProperty","sortByNameHandler","data","asc","directionName","sortBySymbolHandler","directionSymbol","sortByPriceHandler","directionPrice","error","_this2","axios","get","then","response","console","log","date","Date","toDateString","MarketData_MarketData","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.27a63dc0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst coinTable = (props) => (\r\n    <tr className=\"row100\">\r\n        <td className=\"column100 column1\">{props.row.id}</td>\r\n        <td className=\"column100 column2\">{props.row.rank}</td>\r\n        <td className=\"column100 column3\">{props.row.symbol}</td>\r\n        <td className=\"column100 column4\">{props.row.name}</td>\r\n        <td className=\"column100 column5\">{props.formattedPrice}</td>\r\n        <td className=\"column100 column6\">{props.row.percent_change_24h}</td>\r\n        <td className=\"column100 column7\">{props.row.percent_change_1h}</td>\r\n        <td className=\"column100 column8\">{props.row.percent_change_7d}</td>\r\n    </tr>\r\n);\r\n\r\nexport default coinTable;","import React from 'react';\r\nimport './MarketData.css';\r\nimport TableRow from './TableRow/TableRow';\r\n        \r\nconst marketData = (props) => (\r\n\r\n    <table data-vertable=\"ver6\">\r\n    \t<thead>\r\n    \t\t<tr className=\"row100 head\">\r\n                <th className=\"column100 column1\"><button onClick={() => props.sortByRank('id')}>Id</button></th>\r\n    \t\t\t<th className=\"column100 column2\"><button onClick={() => props.sortByRank('rank')}>Rank</button></th>\r\n    \t\t\t<th className=\"column100 column3\"><button onClick={() => props.sortBySymbol('symbol')}>Symbol</button></th>\r\n                <th className=\"column100 column4\"><button onClick={() => props.sortByName('name')}>Name</button></th>\r\n    \t\t\t<th className=\"column100 column5\"><button onClick={() => props.sortByPrice('price_usd')}>Price in $</button></th>\r\n    \t\t\t<th className=\"column100\">%/hour</th>\r\n    \t\t\t<th className=\"column100\">%/day</th>\r\n    \t\t\t<th className=\"column100\">%/week</th>\r\n    \t\t</tr>\r\n    \t</thead>\r\n    \t<tbody>\r\n    \t\t{\r\n    \t\t\tprops.cryptos.map(row => {\r\n    \t\t\t\tconst price = row.price_usd;\r\n    \t\t\t\tconst formattedPrice = parseFloat(price).toFixed(2);\r\n    \t\t\t\treturn (\r\n    \t\t\t\t\t<TableRow key={row.rank} row={row} formattedPrice={formattedPrice} />\r\n    \t\t\t\t)\r\n    \t\t\t})\r\n    \t\t}\r\n    \t</tbody>\r\n    </table>\r\n);\r\n\r\nexport default marketData;","import React, { Component } from 'react';\r\nimport MarketData from '../components/MarketData/MarketData';\r\nimport 'normalize.css';\r\nimport './App.css';\r\nimport axios from 'axios';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            cryptos: [], \r\n            directionRank: {\r\n                rank: 'asc'\r\n            },\r\n            directionSymbol: {\r\n                symbol: 'asc'\r\n            },\r\n            directionName: {\r\n                name: 'asc'\r\n            },\r\n            directionPrice: {\r\n                price_usd: 'asc'\r\n            },\r\n            error: ''\r\n        }\r\n    }\r\n\r\n    sortByRankHandler = (key) => {\r\n        this.setState({\r\n            cryptos: this.state.cryptos.sort((a, b) => (\r\n                this.state.directionRank[key] === 'asc'\r\n                ? \r\n                  parseFloat(a[key]) - parseFloat(b[key])\r\n                : parseFloat(b[key]) - parseFloat(a[key])\r\n            )),\r\n\r\n            directionRank: {\r\n                [key]: this.state.directionRank[key] === 'asc'\r\n                ? 'desc'\r\n                : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n    sortByNameHandler = (key) => {\r\n        this.setState({\r\n            data: this.state.cryptos.sort((a, b) => {\r\n                const asc = this.state.directionName[key] === 'asc'; //Ako je \"asc\" u const asc smjesta true, ako je suprotno false\r\n                if (a[key] < b[key]) { //Ako je a od symbol manje od b od symbol \r\n                    return asc ? -1 : 1; //Ako je asc true vraca -1, ako nije vraca 1\r\n                } else if (a[key] > b[key]) {\r\n                    return asc ? 1 : -1; //Ako je asc true vraca -1, ako nije vraca 1\r\n                } else {\r\n                    return 0;\r\n                }\r\n            }),\r\n\r\n            directionName: {\r\n                [key]: this.state.directionName[key] === 'asc'\r\n                ? 'desc'\r\n                : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n    sortBySymbolHandler = (key) => {\r\n        this.setState({\r\n            cryptos: this.state.cryptos.sort((a, b) => {\r\n                const asc = this.state.directionSymbol[key] === 'asc'; //Ako je \"asc\" u const asc smjesta true, ako je suprotno false\r\n                if (a[key] < b[key]) { //Ako je a od symbol manje od b od symbol \r\n                    return asc ? -1 : 1; //Ako je asc true vraca -1, ako nije vraca 1\r\n                } else if (a[key] > b[key]) {\r\n                    return asc ? 1 : -1; //Ako je asc true vraca -1, ako nije vraca 1\r\n                } else {\r\n                    return 0;\r\n                }\r\n            }),\r\n\r\n            directionSymbol: {\r\n                [key]: this.state.directionSymbol[key] === 'asc'\r\n                ? 'desc'\r\n                : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n    sortByPriceHandler = (key) => {\r\n        this.setState({\r\n            cryptos: this.state.cryptos.sort((a, b) => (\r\n                this.state.directionPrice[key] === 'asc'\r\n                ? \r\n                  parseFloat(a[key]) - parseFloat(b[key])\r\n                : parseFloat(b[key]) - parseFloat(a[key])\r\n            )),\r\n\r\n            directionPrice: {\r\n                [key]: this.state.directionPrice[key] === 'asc'\r\n                ? 'desc'\r\n                : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidMount () {\r\n        axios.get('https://api.coinlore.com/api/tickers/')\r\n        .then(response => {\r\n            const cryptos = response.data.data;\r\n            this.setState({\r\n                cryptos: cryptos\r\n            })\r\n        })\r\n        .then(error => console.log(this.state.error));\r\n    }\r\n\r\n    render() {\r\n        let date = new Date().toDateString();\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"container-fluid container-table100\">\r\n                    <div className=\"container\">\r\n                        <h1 className=\"box-with-text\">Cryptocurrency ranking on {date}</h1>\r\n                        <div className=\"table100 ver6 m-b-110\">\r\n                            <MarketData\r\n                                cryptos={this.state.cryptos}\r\n                                sortByRank={this.sortByRankHandler} \r\n                                sortByName={this.sortByNameHandler}\r\n                                sortBySymbol={this.sortBySymbolHandler}\r\n                                sortByPrice={this.sortByPriceHandler}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}