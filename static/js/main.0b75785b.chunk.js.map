{"version":3,"sources":["components/MarketData/TableRow/TableRow.js","components/MarketData/MarketData.js","containers/App.js","serviceWorker.js","index.js"],"names":["coinTable","props","react_default","a","createElement","className","row","id","rank","symbol","name","formattedPrice","percent_change_24h","percent_change_1h","percent_change_7d","marketData","data-vertable","onClick","sortByRank","sortBySymbol","sortByName","sortByPrice","cryptos","map","price","price_usd","parseFloat","toFixed","TableRow","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sortByRankHandler","setState","state","sort","b","directionRank","defineProperty","sortByNameHandler","data","asc","directionName","sortBySymbolHandler","directionSymbol","sortByPriceHandler","directionPrice","error","_this2","axios","get","then","response","console","log","date","Date","toDateString","MarketData_MarketData","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b75785b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst coinTable = (props) => (\r\n    <tr className=\"row100\">\r\n        <td className=\"column100 column1\">{props.row.id}</td>\r\n        <td className=\"column100 column2\">{props.row.rank}</td>\r\n        <td className=\"column100 column3\">{props.row.symbol}</td>\r\n        <td className=\"column100 column4\">{props.row.name}</td>\r\n        <td className=\"column100 column5\">{props.formattedPrice}</td>\r\n        <td className=\"column100 column6\">{props.row.percent_change_24h}</td>\r\n        <td className=\"column100 column7\">{props.row.percent_change_1h}</td>\r\n        <td className=\"column100 column8\">{props.row.percent_change_7d}</td>\r\n    </tr>\r\n);\r\n\r\nexport default coinTable;","import React from 'react';\r\nimport './MarketData.css';\r\nimport TableRow from './TableRow/TableRow';\r\n        \r\nconst marketData = (props) => (\r\n\r\n    <table data-vertable=\"ver6\">\r\n    \t<thead>\r\n    \t\t<tr className=\"row100 head\">\r\n                <th className=\"column100 column1\"><button onClick={() => props.sortByRank('id')}>Id</button></th>\r\n    \t\t\t<th className=\"column100 column2\"><button onClick={() => props.sortByRank('rank')}>Rank</button></th>\r\n    \t\t\t<th className=\"column100 column3\"><button onClick={() => props.sortBySymbol('symbol')}>Symbol</button></th>\r\n                <th className=\"column100 column4\"><button onClick={() => props.sortByName('name')}>Name</button></th>\r\n    \t\t\t<th className=\"column100 column5\"><button onClick={() => props.sortByPrice('price_usd')}>Price in $</button></th>\r\n    \t\t\t<th className=\"column100\">%/hour</th>\r\n    \t\t\t<th className=\"column100\">%/day</th>\r\n    \t\t\t<th className=\"column100\">%/week</th>\r\n    \t\t</tr>\r\n    \t</thead>\r\n    \t<tbody>\r\n    \t\t{\r\n    \t\t\tprops.cryptos.map(row => {\r\n    \t\t\t\tconst price = row.price_usd;\r\n    \t\t\t\tconst formattedPrice = parseFloat(price).toFixed(2);\r\n    \t\t\t\treturn (\r\n    \t\t\t\t\t<TableRow key={row.rank} row={row} formattedPrice={formattedPrice} />\r\n    \t\t\t\t)\r\n    \t\t\t})\r\n    \t\t}\r\n    \t</tbody>\r\n    </table>\r\n);\r\n\r\nexport default marketData;","import React, { Component } from 'react';\nimport MarketData from '../components/MarketData/MarketData';\nimport 'normalize.css';\nimport './App.css';\nimport axios from 'axios';\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            cryptos: [], \n            directionRank: {\n                rank: 'asc'\n            },\n            directionSymbol: {\n                symbol: 'asc'\n            },\n            directionName: {\n                name: 'asc'\n            },\n            directionPrice: {\n                price_usd: 'asc'\n            },\n            error: ''\n        }\n    }\n\n    sortByRankHandler = (key) => {\n        this.setState({\n            cryptos: this.state.cryptos.sort((a, b) => (\n                this.state.directionRank[key] === 'asc'\n                ? \n                  parseFloat(a[key]) - parseFloat(b[key])\n                : parseFloat(b[key]) - parseFloat(a[key])\n            )),\n\n            directionRank: {\n                [key]: this.state.directionRank[key] === 'asc'\n                ? 'desc'\n                : 'asc'\n            }\n        })\n    }\n\n    sortByNameHandler = (key) => {\n        this.setState({\n            data: this.state.cryptos.sort((a, b) => {\n                const asc = this.state.directionName[key] === 'asc'; //Ako je \"asc\" u const asc smjesta true, ako je suprotno false\n                if (a[key] < b[key]) { //Ako je a od symbol manje od b od symbol \n                    return asc ? -1 : 1; //Ako je asc true vraca -1, ako nije vraca 1\n                } else if (a[key] > b[key]) {\n                    return asc ? 1 : -1; //Ako je asc true vraca -1, ako nije vraca 1\n                } else {\n                    return 0;\n                }\n            }),\n\n            directionName: {\n                [key]: this.state.directionName[key] === 'asc'\n                ? 'desc'\n                : 'asc'\n            }\n        })\n    }\n\n    sortBySymbolHandler = (key) => {\n        this.setState({\n            cryptos: this.state.cryptos.sort((a, b) => {\n                const asc = this.state.directionSymbol[key] === 'asc'; //Ako je \"asc\" u const asc smjesta true, ako je suprotno false\n                if (a[key] < b[key]) { //Ako je a od symbol manje od b od symbol \n                    return asc ? -1 : 1; //Ako je asc true vraca -1, ako nije vraca 1\n                } else if (a[key] > b[key]) {\n                    return asc ? 1 : -1; //Ako je asc true vraca -1, ako nije vraca 1\n                } else {\n                    return 0;\n                }\n            }),\n\n            directionSymbol: {\n                [key]: this.state.directionSymbol[key] === 'asc'\n                ? 'desc'\n                : 'asc'\n            }\n        })\n    }\n\n    sortByPriceHandler = (key) => {\n        this.setState({\n            cryptos: this.state.cryptos.sort((a, b) => (\n                this.state.directionPrice[key] === 'asc'\n                ? \n                  parseFloat(a[key]) - parseFloat(b[key])\n                : parseFloat(b[key]) - parseFloat(a[key])\n            )),\n\n            directionPrice: {\n                [key]: this.state.directionPrice[key] === 'asc'\n                ? 'desc'\n                : 'asc'\n            }\n        })\n    }\n\n    componentDidMount () {\n        axios.get('https://api.coinlore.com/api/tickers/')\n        .then(response => {\n            const cryptos = response.data.data;\n            this.setState({\n                cryptos: cryptos\n            })\n        })\n        .then(error => console.log(this.state.error));\n    }\n\n    render() {\n        let date = new Date().toDateString();\n        return (\n            <div className=\"App\">\n                <div className=\"container-fluid container-table100\">\n                    <div className=\"container\">\n                        <h1 className=\"box-with-text\">Cryptocurrency ranking on {date}</h1>\n                        <div className=\"table100 ver6 m-b-110\">\n                            <MarketData\n                                cryptos={this.state.cryptos}\n                                sortByRank={this.sortByRankHandler} \n                                sortByName={this.sortByNameHandler}\n                                sortBySymbol={this.sortBySymbolHandler}\n                                sortByPrice={this.sortByPriceHandler}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}